import time
import random
import concurrent.futures

# Sequential Merge Sort
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        # Merging the two halves
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Multithreaded Merge Sort
def merge_sort_multithreaded(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # Use threads to sort both halves concurrently
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future_left = executor.submit(merge_sort_multithreaded, left_half)
            future_right = executor.submit(merge_sort_multithreaded, right_half)

            future_left.result()
            future_right.result()

        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

    return arr

# Function to measure the time taken by each sorting algorithm
def time_function(func, arr):
    start_time = time.time()
    func(arr)
    return time.time() - start_time

# Generate test cases
def generate_test_case(size, case_type='random'):
    if case_type == 'random':
        return [random.randint(1, 10000) for _ in range(size)]
    elif case_type == 'best':
        return list(range(size))  # Already sorted
    elif case_type == 'worst':
        return list(range(size, 0, -1))  # Reverse sorted

# Compare sequential and multithreaded merge sort
if __name__ == '__main__':
    size = 10000  # You can modify this size to test larger inputs

    # Test with a random case
    print("\n--- Random Case ---")
    random_case = generate_test_case(size, 'random')
    random_case_copy = random_case.copy()
    
    sequential_time = time_function(merge_sort, random_case_copy)
    print(f"Sequential Merge Sort took: {sequential_time:.6f} seconds")

    random_case_copy = random_case.copy()
    multithreaded_time = time_function(merge_sort_multithreaded, random_case_copy)
    print(f"Multithreaded Merge Sort took: {multithreaded_time:.6f} seconds")

    # Test with best case
    print("\n--- Best Case ---")
    best_case = generate_test_case(size, 'best')
    best_case_copy = best_case.copy()
    
    sequential_time = time_function(merge_sort, best_case_copy)
    print(f"Sequential Merge Sort took: {sequential_time:.6f} seconds")

    best_case_copy = best_case.copy()
    multithreaded_time = time_function(merge_sort_multithreaded, best_case_copy)
    print(f"Multithreaded Merge Sort took: {multithreaded_time:.6f} seconds")

    # Test with worst case
    print("\n--- Worst Case ---")
    worst_case = generate_test_case(size, 'worst')
    worst_case_copy = worst_case.copy()
    
    sequential_time = time_function(merge_sort, worst_case_copy)
    print(f"Sequential Merge Sort took: {sequential_time:.6f} seconds")

    worst_case_copy = worst_case.copy()
    multithreaded_time = time_function(merge_sort_multithreaded, worst_case_copy)
    print(f"Multithreaded Merge Sort took: {multithreaded_time:.6f} seconds")


#--- Random Case ---
# Sequential Merge Sort took: 0.099656 seconds

# --- Random Case ---
# Sequential Merge Sort took: 0.018402 seconds